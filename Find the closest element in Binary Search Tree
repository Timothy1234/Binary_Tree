
class Solution:
    
    #Function to find the least absolute difference between any node
    #value of the BST and the given integer.
    def minDiff2(self,root, K):
        # code here
        def dfs(root, left, right, K):
            if root == None:
                return
            
            if root.data == K:
                return root.data
                
            elif root.data > K:
                dfs(root.left, left, root, K)
                
            elif root.data < K:
                dfs(root.right, root, right, K)
            
            if left and right:
                if root.data - left.data < right.data - root.data:
                    return left.data
                else:
                    return right.data
            else:
                if left:
                    return left.data
                else:
                    return right.data 
        if root.data > K:
            return dfs(root.left, None, root, K)
            
        else: 
            return dfs(root.right, root, None, K)
######################################################################
    def minDiff3(self,root, K):
        # code here
        def dfs(root, min_diff, min_diff_key, K):
            if root == None:
                return  
                
            if root.data == K:
                min_diff_key[0] = K
                return
            
            if min_diff > abs(root.data - K):
                min_diff = abs(root.data - K)
                min_diff_key[0] = root.data
                
            if root.data > k:
                dfs(root.left, min_diff, min_diff_key, K)
                
            else:
                dfs(root.right, min_diff, min_diff_key, K)
        
        min_diff, min_diff_key = float('inf'), [-1]
        dfs(root, min_diff, min_diff_key, K)
        return min_diff_key[0]


    def maxDiffUtil(ptr, k, min_diff, min_diff_key):
        if ptr == None: 
            return
              
        # If k itself is present 
        if ptr.key == k:
            min_diff_key[0] = k 
            return
      
        # update min_diff and min_diff_key by  
        # checking current node value 
        if min_diff > abs(ptr.key - k):
            min_diff = abs(ptr.key - k) 
            min_diff_key[0] = ptr.key
      
        # if k is less than ptr->key then move 
        # in left subtree else in right subtree 
        if k < ptr.key:
            self.maxDiffUtil(ptr.left, k, min_diff, 
                                     min_diff_key)
        else:
            self.maxDiffUtil(ptr.right, k, min_diff, 
                                      min_diff_key)
#########################################################################                                      
      
    # Wrapper over maxDiffUtil() 
    def maxDiff(root, k):
          
        # Initialize minimum difference 
        min_diff, min_diff_key = 999999999999, [-1]
      
        # Find value of min_diff_key (Closest 
        # key in tree with k) 
        self.maxDiffUtil(root, k, min_diff, min_diff_key)
      
        return min_diff_key[0] 
